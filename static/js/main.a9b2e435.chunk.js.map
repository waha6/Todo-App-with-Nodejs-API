{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","TODOAPI","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAll","fetch","then","j","json","a","setState","todos","add","text","state","_this2","_this$state","react_default","createElement","className","value","onChange","t","target","onClick","map","i","key","title","length","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbN,IAAMC,EAAU,4CAEVC,cACJ,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFI,OAAS,WACPC,MAAMV,GAASW,KAAK,SAAAC,GAAC,OAAEA,EAAEC,SAAQF,KAAK,SAAAG,GAAC,OAAEZ,EAAKa,SAAS,CAACC,MAAMF,OARnDZ,EAUbe,IAAM,WAAI,IACDC,EAAShB,EAAKiB,MAAdD,KACPR,MAAMV,EAAQ,cAAckB,GAC5BhB,EAAKO,SACLP,EAAKa,SAAS,CAACG,KAAK,MAZpBhB,EAAKiB,MAAM,CACTH,MAAM,KACNE,KAAK,IAJIhB,mFAiBXG,KAAKI,0CAEE,IAAAW,EAAAf,KAAAgB,EACahB,KAAKc,MAAlBH,EADAK,EACAL,MAAME,EADNG,EACMH,KACb,OACEI,EAAAR,EAAAS,cAAA,OAAKC,UAAU,OACfF,EAAAR,EAAAS,cAAA,YAAMD,EAAAR,EAAAS,cAAA,SAAOE,MAAOP,EAAMQ,SAAU,SAAAC,GAAC,OAAEP,EAAKL,SAAS,CAACG,KAAKS,EAAEC,OAAOH,WAAUH,EAAAR,EAAAS,cAAA,UAAQM,QAASxB,KAAKY,KAAtB,OAAuCK,EAAAR,EAAAS,cAAA,UAAQM,QAAS,WAAKnB,MAAMV,EAAQ,cAAcoB,EAAKX,WAAvD,cACrHa,EAAAR,EAAAS,cAAA,UACGP,GAAQA,EAAMc,IAAI,SAAAC,GAAC,OAAET,EAAAR,EAAAS,cAAA,MAAIS,IAAKD,EAAC,KAAUA,EAAEE,MAAM,iBAAiBX,EAAAR,EAAAS,cAAA,UAAQM,QAAS,WAAKnB,MAAMV,EAAQ,cAAc+B,EAAC,KAASX,EAAKX,WAAjE,UAE3D,OAARO,GAA+B,IAAfA,EAAMkB,SAAcZ,EAAAR,EAAAS,cAAA,yCA5B1BY,aAkClBC,IAASC,OAAOf,EAAAR,EAAAS,cAACe,EAAD,MAASC,SAASC,eAAe,SDwF3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.a9b2e435.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst TODOAPI = 'https://blooming-peak-52963.herokuapp.com';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      todos:null,\n      text:''\n    }\n  }\n  getAll = () => {\n    fetch(TODOAPI).then(j=>j.json()).then(a=>this.setState({todos:a}));\n  }\n  add = ()=>{\n    const {text } = this.state;\n    fetch(TODOAPI+'/add?title='+text);\n    this.getAll();\n    this.setState({text:''});\n  }\n  componentDidMount(){\n    this.getAll();\n  }\n  render() {\n    const {todos,text}= this.state;\n    return (\n      <div className=\"App\">\n      <span><input value={text} onChange={t=>this.setState({text:t.target.value})}/><button onClick={this.add}>Add</button><button onClick={()=>{fetch(TODOAPI+'/deleteall');this.getAll()}}>DeleteAll</button></span>\n      <ul>\n        {todos&& todos.map(i=><li key={i['_id']}>{i.title+'--------------'}<button onClick={()=>{fetch(TODOAPI+'/delete?id='+i['_id']);this.getAll()}}>X</button></li>)}\n      </ul>\n      {(todos===null || todos.length===0) &&<div>Todo list is empty</div>}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}